package qr

import (
	"fmt"
	"reflect"
	"testing"
)

func generateQR1(text string, level levelCorrection) [][]bool {
	data, version := fillNumeric([]byte(text), level)
	fmt.Println(text)
	fmt.Println(version)
	fmt.Println(data)

	countByteOfBlock := getCountByteOfBlock(level, version-1)
	dataBlock := fillBlocks(data, countByteOfBlock)

	correctionBlock := make([][]byte, len(dataBlock))
	for i, bytes := range dataBlock {
		correctionBlock[i] = createByteCorrection(level, version-1, &bytes)
	}

	blocks := mergeBlocks(dataBlock, correctionBlock)

	canvas, busyRangeModuls := generateInfoCanvas(version)
	generatePreCode(blocks, &canvas, &busyRangeModuls)

	lengthCanvas := len(canvas)
	candidateCanvas := make([][]bool, lengthCanvas)
	copy(candidateCanvas, canvas)
	oldMask := byte(8)

	drawMask(&candidateCanvas, &busyRangeModuls, oldMask, 0)
	drawCodeMaskLevelCorrection(&candidateCanvas, level, 0)
	printQR(&candidateCanvas)

	//for i := 0; i < 8; i++ {
	//	drawMask(&candidateCanvas, &busyRangeModuls, oldMask, byte(i))
	//	drawCodeMaskLevelCorrection(&candidateCanvas, level, byte(i))
	//	printQR(&candidateCanvas)
	//	//drawCodeMaskLevelCorrection(&candidateCanvas, level, byte(i))
	//	oldMask = byte(i)
	//}

	//drawMask(&candidateCanvas, &busyRangeModuls, 8, 2)
	//drawCodeMaskLevelCorrection(&candidateCanvas, level, 2)

	// ToDo применить маску
	return canvas
}

func Test_generateQR1(t *testing.T) {
	type args struct {
		text  string
		level levelCorrection
	}
	tests := []struct {
		name string
		args args
		want [][]bool
	}{
		{"Test 1234567890123", args{"1234567890123", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, I, O, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, O, I, O, O, O, I, O, O, I, O},
			{O, O, O, O, O, I, O, O, I, I, O, I, O, I, O, I, O, O, O, O, I},
			{O, I, O, I, I, I, I, I, O, I, O, I, O, I, I, I, O, I, O, O, O},
			{O, I, O, O, O, I, O, O, I, I, I, I, I, I, O, I, I, I, O, O, I},
			{O, I, I, I, O, I, I, O, O, I, I, I, O, I, I, I, O, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, I, O, O, O, O, I, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, I, O, I, O, O, O, I, I, O, I, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, O, O, I, I, O, I, O, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, I, O, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, I, O, I, O, O, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, O, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, I, O, I, I, O, I, O, I, O, I},
		}},
		{"Test 123456789012", args{"123456789012", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, O, O, I, O, O, O, I, O, O, I, O},
			{I, O, O, I, O, I, O, I, I, O, I, I, O, I, O, I, O, O, O, O, I},
			{I, I, O, I, I, I, I, I, I, I, O, I, O, I, I, I, O, I, O, O, O},
			{O, I, I, I, O, O, O, O, O, O, O, I, I, I, O, I, I, I, O, O, I},
			{I, O, I, O, O, O, I, O, O, O, O, I, O, I, I, I, O, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, I, I, O, O, O, I, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, O, I, O, O, O, I, I, O, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, O, O, I, I, O, I, O, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, I, O, I, O, I, O, O, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, I, O, I, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, O, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, O, I, O, I, I, O, I, O, I, O, I},
		}},
		{"Test 1234567890", args{"1234567890", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, I, O, O, O, O, I, O, O, I, O},
			{I, I, I, I, I, I, O, I, I, O, I, O, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, I, I, I, I, O, O, O, I, O, O, O, I, I, O, O, O},
			{I, O, O, O, I, O, O, O, O, O, O, O, O, O, I, O, O, I, O, O, I},
			{I, O, O, O, I, O, I, O, O, O, O, O, I, O, I, O, I, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, I, O, I, I, I, O, I, O, O, O},
			{I, O, O, O, O, O, I, O, O, I, O, I, I, I, O, I, I, I, O, I, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, I, O, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, O, O, O, I, I, O, O, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, O, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 123456789", args{"123456789", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, I, I, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, I, O, O, O, O, I, O, O, I, O},
			{O, I, O, O, O, I, O, I, O, O, O, O, O, O, I, O, O, O, O, O, I},
			{O, I, O, I, I, I, I, I, O, I, I, O, I, O, O, O, I, I, O, O, O},
			{I, I, O, O, O, O, O, O, O, O, I, O, O, O, I, O, O, I, O, O, I},
			{I, I, I, I, O, O, I, I, I, I, I, O, I, O, I, O, I, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, I, O, I, I, I, O, I, O, I, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, I, I, O, I, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, I, O, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, I, O, O, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, O, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, O, O, I, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 12345678", args{"12345678", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, O, I, O, O, O, I, O, O, I, O},
			{O, I, O, I, O, I, O, O, I, O, O, I, O, I, O, I, O, O, O, O, I},
			{I, O, I, O, O, I, I, O, O, O, I, I, O, I, I, I, O, I, O, O, O},
			{O, O, I, O, I, I, O, O, I, I, O, I, I, I, O, I, I, I, O, O, I},
			{I, O, I, I, O, O, I, O, I, I, I, I, O, I, I, I, O, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, I, I, O, O, O, I, O, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, O, O, I, I},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, I, I, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, O, I, O, I, I, I, O, O, I, O, I},
		}},
		{"Test 1234567", args{"1234567", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, I, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, I, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, O, I, O, O, O, I, O, O, I, O},
			{O, O, O, O, I, O, O, I, O, O, O, I, O, I, O, I, O, O, O, O, I},
			{O, O, I, O, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, O, O},
			{O, O, O, O, O, I, O, I, O, O, I, I, I, I, O, I, I, I, O, O, I},
			{O, O, O, O, O, I, I, I, I, O, O, I, O, I, I, I, O, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, I, I, O, O, O, I, O, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, O, I, O, O, O, I, I, I, I, O},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, O, O, O, I, O, O},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
		}},
		{"Test 123456", args{"123456", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, I, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, O, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, I, O, O, O, O, I, O, O, I, O},
			{I, I, I, I, I, I, O, I, I, I, I, O, O, O, I, O, O, O, O, O, I},
			{O, I, O, I, I, I, I, O, O, I, O, O, I, O, O, O, I, I, O, O, O},
			{I, I, I, I, O, O, O, O, I, I, O, O, O, O, I, O, O, I, O, O, I},
			{I, I, I, I, I, I, I, O, I, I, O, O, I, O, I, O, I, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, I, O, I, I, I, O, O, I, O, O},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 12345", args{"12345", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, I, I, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, I, O, O, O, O, I, O, O, I, O},
			{O, I, O, O, I, I, O, O, O, I, O, O, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, O, I, I, O, I, O, O, I, O, O, O, I, I, I, O, O},
			{I, I, I, O, I, I, O, O, I, O, O, O, O, O, I, O, O, I, I, O, I},
			{O, O, I, I, I, I, I, O, O, O, I, O, I, O, I, O, I, O, O, I, I},
			{O, O, O, O, O, O, O, O, I, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, I, O, I, I, I, O, O, I, I, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, I, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 1234", args{"1234", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, O, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, I, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, O, I, O, O, O, O, I, O, O, I, O},
			{I, O, I, I, I, O, O, I, I, O, O, O, O, O, I, O, O, O, O, O, I},
			{O, I, O, I, I, I, I, I, I, O, I, O, I, O, O, O, I, O, I, O, O},
			{I, I, O, I, O, O, O, O, I, I, I, O, O, O, I, O, O, I, O, O, I},
			{I, I, I, O, O, O, I, I, I, O, O, O, I, O, I, O, I, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, I, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 123", args{"123", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, O, I, O, O, O, I, O, O, I, O},
			{I, I, O, O, I, I, O, O, I, I, I, I, O, I, O, I, O, I, O, O, I},
			{O, I, O, I, I, I, I, O, I, I, I, I, O, I, I, I, O, O, I, O, O},
			{O, I, O, I, I, O, O, I, I, O, I, I, I, I, O, I, I, I, O, O, I},
			{I, O, I, O, O, O, I, I, O, I, O, I, O, I, I, I, O, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, I, O, O, O, O, I, O, O, O, I, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, O, I, O, O, O, I, O, O, I, O},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, I, O, I, I, I, O, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, I, O, I, I, I, O, I, I, O, I},
		}},
		{"Test 12", args{"12", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, O, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, O, I, O, O, O, I, O, O, I, O},
			{O, O, O, O, I, I, O, I, I, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, O, I, I, I, I, O, I, I, O, I, O, I, I, I, O, O, I, O, I},
			{I, I, I, I, O, O, O, O, O, O, O, I, I, I, O, I, I, I, O, I, I},
			{I, O, I, I, O, O, I, I, I, I, O, I, O, I, I, I, O, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, O, I, O, O, O, I, O, O, O, O},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, I, O, I, I, I, O, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, I, O, I, I, I, O, I, I, O, I},
		}},
		{"Test 1", args{"1", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, O, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, I, O, O, O, O, I, O, O, I, O},
			{O, I, O, I, I, O, O, O, I, O, O, O, O, O, I, O, O, O, I, I, O},
			{O, O, I, I, O, I, I, O, I, O, I, O, I, O, O, O, I, O, O, O, I},
			{I, I, O, O, I, O, O, I, O, O, O, O, O, O, I, O, O, O, I, I, O},
			{O, O, O, O, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, I, O, I, I, I, O, I, I, I, I},
			{I, O, O, O, O, O, I, O, O, I, O, I, I, I, O, I, I, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 0", args{"0", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, I, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, I, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, I, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, O, I, O, O, O, O, I, O, O, I, O},
			{I, O, O, I, I, I, O, I, I, I, I, O, O, O, I, O, O, O, I, I, O},
			{O, O, I, O, O, I, I, O, O, I, I, O, I, O, O, O, I, O, O, O, I},
			{I, O, I, O, O, O, O, I, I, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, I, O, O, I, O, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, I, O, I, I, I, O, I, I, I, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, I, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 00", args{"00", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, O, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, O, I, O, O, O, I, O, O, I, O},
			{O, O, O, O, O, O, O, O, O, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, I, I, O, I, O, I, I, O, I, I, I, O, O, I, O, I},
			{I, I, O, I, I, O, O, I, O, I, I, I, I, I, O, I, I, I, O, I, O},
			{I, O, I, I, O, I, I, I, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, O, O, O, O, I, O, O, O, I, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, O, I, O, O, O, I, O, O, O, O},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, I, O, I, I, I, O, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, I, O, I, I, I, O, I, I, O, I},
		}},
		{"Test 000", args{"000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, I, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, O, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, O, O, I, O, O, O, I, O, O, I, O},
			{I, I, O, I, I, I, O, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{O, O, O, I, I, I, I, I, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{O, O, I, O, I, I, O, I, O, I, O, I, I, I, O, I, I, I, O, I, O},
			{O, O, I, O, O, I, I, O, I, I, O, I, O, I, I, I, O, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, O, I, O, O, O, I, O, O, I, O},
			{I, O, O, O, O, O, I, O, O, O, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, I, O, I, I, I, O, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, I, O, I, I, I, O, I, I, O, I},
		}},
		{"Test 0000", args{"0000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, I, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, I, O, O, O, O, I, O, O, I, O},
			{I, O, I, O, O, I, O, O, O, O, O, O, O, O, I, O, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, I, I, O, O, O, O, O, O, O, O, O, O, I, O, O, I, O, I, O},
			{I, I, O, I, O, I, I, I, O, O, O, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 00000", args{"00000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, I, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, O, I, O, O, O, O, I, O, O, I, O},
			{O, I, I, I, I, O, O, O, I, I, O, O, O, O, I, O, O, I, O, I, O},
			{O, O, O, I, I, O, I, I, I, I, O, O, I, O, O, O, I, O, I, O, I},
			{O, I, O, O, O, I, O, O, O, O, I, O, O, O, I, O, O, I, O, I, O},
			{O, I, O, O, O, I, I, O, O, I, O, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, I, O, I, I, I, O, O, I, I, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, I, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 000000", args{"000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, I, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, O, I, O, O, O, O, I, O, O, I, O},
			{I, I, O, O, O, O, O, O, O, I, I, O, O, O, I, O, O, I, O, I, O},
			{I, I, I, I, I, O, I, I, O, O, I, O, I, O, O, O, I, O, I, O, I},
			{O, O, O, O, I, I, O, O, O, O, O, O, O, O, I, O, O, I, O, I, O},
			{O, O, I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, I, O, I, I, I, O, O, I, O, O},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, I, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, O, O, O, I, O, O, O, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, O, O, I, O, O, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, O, O, I, O, O, O, I, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 0000000", args{"0000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, O, O, I, O, O, O, I, O, O, I, O},
			{I, I, O, I, O, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, O, I, O, I, I, I, O, I, O, I, O, I, I, I, O, O, I, O, I},
			{O, I, O, I, I, O, O, I, O, O, O, I, I, I, O, I, I, I, O, I, O},
			{I, I, I, O, I, O, I, O, I, O, I, I, O, I, I, I, O, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, O, O, O, O, O, I, O, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, O, I, O, O, O, I, O, I, I, O},
			{I, O, O, O, O, O, I, O, O, O, O, O, O, O, I, O, O, I, O, O, O},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
		}},
		{"Test 00000000", args{"00000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, I, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, O, I, O, O, O, I, O, O, I, O},
			{I, O, O, I, I, I, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, O, O, I, I, O, O, I, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, O, O, I, O, I, O, I, I, I, I, I, O, I, I, I, O, I, O},
			{O, O, O, I, I, O, I, I, O, I, I, I, O, I, I, I, O, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, O, O, O, O, I, O, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, I, O, I, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, I, O, I, I, I, O, O, I, O, I},
		}},
		{"Test 000000000", args{"000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, O, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, I, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, I, O, O, O, O, I, O, O, I, O},
			{I, I, O, O, O, O, O, I, I, I, I, O, O, O, I, O, O, I, O, I, O},
			{I, O, O, I, I, I, I, I, I, O, O, O, I, O, O, O, I, O, I, O, I},
			{I, I, O, O, O, I, O, O, O, O, I, O, O, O, I, O, O, I, O, I, O},
			{O, O, O, I, I, O, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, I, O, I, I, I, O, O, I, I, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, I, I},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, O, O, I, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 0000000000", args{"0000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, I, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, I, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, I, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, I, O, O, O, O, I, O, O, I, O},
			{O, I, I, I, I, O, O, I, O, I, O, O, O, O, I, O, O, I, O, I, O},
			{O, I, I, I, I, I, I, I, O, I, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, I, I, O, O, O, O, O, O, O, O, I, O, O, I, O, I, O},
			{O, I, I, O, O, O, I, I, O, I, I, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, I, I, O, I, I, I, O, O, I, O, O},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, I, I, I, O, I, I},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 00000000000", args{"00000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, O, I, O, O, O, O, I, O, O, I, O},
			{I, O, I, O, O, I, O, I, I, O, O, O, O, O, I, O, O, I, O, I, O},
			{I, I, O, I, I, I, I, O, O, I, O, O, I, O, O, O, I, O, I, O, I},
			{O, I, I, I, I, O, O, O, O, O, I, O, O, O, I, O, O, I, O, I, O},
			{I, I, I, I, O, O, I, O, O, O, I, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, I, I, O, I, I, I, O, O, I, I, O},
			{I, O, O, O, O, O, I, O, O, O, O, I, I, I, O, I, I, I, O, I, I},
			{I, O, I, I, I, O, I, O, I, I, I, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, O, O, O, I, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 000000000000", args{"000000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, O, I, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, I, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, O, O, I, O, O, O, I, O, O, I, O},
			{I, I, O, I, O, O, O, O, O, I, I, I, O, I, O, I, O, I, O, I, O},
			{O, I, O, I, O, O, I, I, O, O, O, I, O, I, I, I, O, O, I, O, I},
			{I, O, I, O, I, O, O, I, I, I, O, I, I, I, O, I, I, I, O, I, O},
			{I, I, O, I, I, I, I, O, I, O, O, I, O, I, I, I, O, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, O, O, O, O, O, I, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, O, O, I, I, O, I, O, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, O, I, I, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, I, O, I, I, O, I, O, I, O, I},
		}},
		{"Test 0000000000000", args{"0000000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, O, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, O, I, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, O, I, O, O, O, I, O, O, I, O},
			{O, O, O, O, I, I, O, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, O, O, I, O, O, O, I, I, O, I, I, I, O, O, I, O, I},
			{O, I, O, I, I, I, O, I, I, I, I, I, I, I, O, I, I, I, O, I, O},
			{O, I, O, O, I, I, I, I, I, I, O, I, O, I, I, I, O, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, O, I, O, O, O, I, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, O, I, O, O, O, I, O, I, I, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, O, O, I, I, O, I, O, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, I, O, I, I, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, I, O, I, I, O, I, O, I, O, I},
		}},
		{"Test 00000000000000", args{"00000000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, O, I, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, I, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, I, O, O, O, O, I, O, O, I, O},
			{O, O, I, O, O, I, O, O, O, I, O, O, O, O, I, I, O, I, O, I, O},
			{I, I, O, I, I, O, I, O, O, I, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, I, I, I, I, O, I, I, O, I, O, O, O, I, I, O, I, O, I, O},
			{O, I, O, I, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I, O, I},
			{O, O, O, O, O, O, O, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, O, I, O, I, I, O, I, O, I, O, O},
			{I, O, O, O, O, O, I, O, O, O, I, I, I, I, O, I, O, I, O, O, I},
			{I, O, I, I, I, O, I, O, I, I, I, I, O, I, I, O, I, O, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, O, O, O, I, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, O, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 100000000010000000001000000000", args{"100000000010000000001000000000", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, O, I, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, O, O, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, I, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, I, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, I, I, O, O, O, O, I, O, O, I, O},
			{O, O, O, I, O, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{O, I, I, O, O, O, I, O, O, O, O, O, I, O, I, O, I, O, I, I, I},
			{I, O, O, I, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, I},
			{I, I, I, O, O, I, I, O, I, I, I, O, I, O, I, O, I, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, O, I, I, I, O, I, O, I, O, O},
			{I, O, O, O, O, O, I, O, O, I, O, I, O, I, O, I, O, I, O, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, O, I, I, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 100000000010000000001000000000123", args{"100000000010000000001000000000123", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, O, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, O, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, O, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, I, O, O, O, O, O, I, O, O, I, O},
			{O, I, O, O, O, O, O, O, O, O, I, O, I, I, O, I, O, I, O, I, O},
			{O, I, O, O, I, O, I, I, I, I, I, I, I, O, I, O, I, O, I, I, I},
			{I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, O, I, I},
			{O, I, O, O, I, O, I, I, O, I, O, O, I, O, I, O, I, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, I, O, I, I, I, O, I, O, I, I, I},
			{I, O, O, O, O, O, I, O, O, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, I, O, I, O, O},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, O, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, O, O, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 1000000000100000000010000000001234", args{"1000000000100000000010000000001234", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, I, I, O, O, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, I, I, O, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, O, O, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, O, O, O, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, O, O, O, O, O, O, O, I, O, O, I, O},
			{I, I, I, O, O, I, O, I, I, O, I, O, I, I, O, I, O, I, O, I, O},
			{I, I, O, I, O, O, I, I, O, O, I, I, I, O, I, O, I, O, I, I, I},
			{I, O, O, I, O, O, O, I, I, I, I, I, O, I, O, I, O, I, O, I, I},
			{I, I, O, I, I, O, I, I, I, I, I, O, I, O, I, O, I, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, I, I, O, I, I, I, O, I, O, I, O, O},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, O, I, O, I, O, I, O, I, O, O},
			{I, O, I, I, I, O, I, O, O, I, I, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, I, O, O, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, O, I, O, I, I, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O, I, O, I},
		}},
		{"Test 10000000001000000000100000000012345", args{"10000000001000000000100000000012345", Medium}, [][]bool{
			{I, I, I, I, I, I, I, O, O, O, I, O, I, I, O, O, I, O, I, I, I, I, I, I, I},
			{I, O, O, O, O, O, I, O, I, I, O, I, O, O, I, I, I, O, I, O, O, O, O, O, I},
			{I, O, I, I, I, O, I, O, O, O, O, I, I, I, I, O, I, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, O, I, I, O, O, I, I, I, O, O, I, O, I, I, I, O, I},
			{I, O, I, I, I, O, I, O, I, O, I, O, O, O, I, O, O, O, I, O, I, I, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, I, I, I, O, O, O, O, I, O, O, O, O, O, I},
			{I, I, I, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O, I, I, I, I, I, I, I},
			{O, O, O, O, O, O, O, O, O, I, O, O, I, I, I, O, I, O, O, O, O, O, O, O, O},
			{I, O, I, O, I, O, I, O, O, I, O, O, O, O, I, I, I, O, O, O, I, O, O, I, O},
			{O, O, I, O, O, I, O, I, I, I, I, O, I, O, I, I, O, I, O, I, O, I, O, I, O},
			{O, O, I, O, O, I, I, I, I, I, O, O, I, I, O, O, I, O, I, I, I, O, I, O, I},
			{O, O, O, O, I, I, O, O, O, O, I, I, I, O, O, O, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, I, I, O, O, I, O, I, I, O, O, I, O, O, I, O, I, O, I, O, I},
			{O, I, O, I, I, O, O, O, I, I, I, I, I, I, O, I, I, I, O, I, O, I, O, I, O},
			{I, O, O, I, I, O, I, O, I, O, I, I, I, O, I, O, O, O, I, O, I, O, I, I, I},
			{O, I, O, I, O, O, O, I, I, O, I, O, I, I, I, O, O, I, O, I, O, I, O, I, I},
			{I, O, I, I, I, O, I, I, O, O, O, I, O, O, I, I, I, I, I, I, I, O, I, I, I},
			{O, O, O, O, O, O, O, O, I, I, I, I, O, O, I, O, I, O, O, O, I, I, O, I, O},
			{I, I, I, I, I, I, I, O, O, O, O, O, O, I, O, I, I, O, I, O, I, O, O, I, O},
			{I, O, O, O, O, O, I, O, O, O, O, I, O, O, O, O, I, O, O, O, I, I, I, I, O},
			{I, O, I, I, I, O, I, O, I, I, I, O, I, O, O, O, I, I, I, I, I, O, I, O, O},
			{I, O, I, I, I, O, I, O, O, O, I, I, I, I, O, I, O, I, O, I, O, I, O, I, O},
			{I, O, I, I, I, O, I, O, I, O, O, I, I, O, I, O, I, O, I, O, I, O, I, O, I},
			{I, O, O, O, O, O, I, O, O, I, I, O, I, I, I, I, O, I, O, I, O, I, O, O, O},
			{I, I, I, I, I, I, I, O, I, I, I, I, O, O, I, O, I, O, I, O, I, O, I, O, I},
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := generateQR1(tt.args.text, tt.args.level); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("generateQR1() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_fillNumeric(t *testing.T) {
	type args struct {
		data  []byte
		level levelCorrection
	}
	tests := []struct {
		name  string
		args  args
		want  []byte
		want1 byte
	}{
		{"Test 1234567890123", args{[]byte("1234567890123"), Medium}, []byte{16, 52, 123, 114, 49, 80, 48, 192, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 123456789012", args{[]byte("123456789012"), Medium}, []byte{16, 48, 123, 114, 49, 80, 48, 0, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 1234567890", args{[]byte("1234567890"), Medium}, []byte{16, 40, 123, 114, 49, 80, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 123456789", args{[]byte("123456789"), Medium}, []byte{16, 36, 123, 114, 49, 80, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 12345678", args{[]byte("12345678"), Medium}, []byte{16, 32, 123, 114, 39, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 1234567", args{[]byte("1234567"), Medium}, []byte{16, 28, 123, 114, 28, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 123456", args{[]byte("123456"), Medium}, []byte{16, 24, 123, 114, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 12345", args{[]byte("12345"), Medium}, []byte{16, 20, 123, 90, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 1234", args{[]byte("1234"), Medium}, []byte{16, 16, 123, 64, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 123", args{[]byte("123"), Medium}, []byte{16, 12, 123, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 12", args{[]byte("12"), Medium}, []byte{16, 8, 96, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 1", args{[]byte("1"), Medium}, []byte{16, 4, 64, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 0", args{[]byte("0"), Medium}, []byte{16, 4, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 00", args{[]byte("00"), Medium}, []byte{16, 8, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 000", args{[]byte("000"), Medium}, []byte{16, 12, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 0000", args{[]byte("0000"), Medium}, []byte{16, 16, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 00000", args{[]byte("00000"), Medium}, []byte{16, 20, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 000000", args{[]byte("000000"), Medium}, []byte{16, 24, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 0000000", args{[]byte("0000000"), Medium}, []byte{16, 28, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 00000000", args{[]byte("00000000"), Medium}, []byte{16, 32, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 000000000", args{[]byte("000000000"), Medium}, []byte{16, 36, 0, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 0000000000", args{[]byte("0000000000"), Medium}, []byte{16, 40, 0, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 00000000000", args{[]byte("00000000000"), Medium}, []byte{16, 44, 0, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 000000000000", args{[]byte("000000000000"), Medium}, []byte{16, 48, 0, 0, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 0000000000000", args{[]byte("0000000000000"), Medium}, []byte{16, 52, 0, 0, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236, 17}, 1},
		{"Test 00000000000000", args{[]byte("00000000000000"), Medium}, []byte{16, 56, 0, 0, 0, 0, 0, 0, 0, 236, 17, 236, 17, 236, 17, 236}, 1},
		{"Test 100000000010000000001000000000", args{[]byte("100000000010000000001000000000"), Medium}, []byte{16, 120, 100, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0, 0, 236}, 1},
		{"Test 100000000010000000001000000000123", args{[]byte("100000000010000000001000000000123"), Medium}, []byte{16, 132, 100, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0, 7, 176}, 1},
		{"Test 1000000000100000000010000000001234", args{[]byte("1000000000100000000010000000001234"), Medium}, []byte{16, 136, 100, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0, 7, 180}, 1},
		{"Test 10000000001000000000100000000012345", args{[]byte("10000000001000000000100000000012345"), Medium}, []byte{16, 140, 100, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0, 7, 181, 160, 236, 17, 236, 17, 236, 17, 236, 17, 236, 17, 236}, 2},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1 := fillNumeric(tt.args.data, tt.args.level)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("fillNumeric() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.want1 {
				t.Errorf("fillNumeric() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}
